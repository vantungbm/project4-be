name: workflow-cd

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v4
        # Set up a python environment using the specified python version.
      - uses: actions/setup-python@v4
        with:
          python-version: 3.10.x
      # Install the dependencies.
      - run: pip install pipenv
      - run: pipenv install
      - run: pip install flake8
      # Run the linter.
      - run: pipenv run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v4
      # Set up a python environment using the specified python version.
      - uses: actions/setup-python@v4
        with:
          python-version: 3.10.x

      # Install the dependencies.
      - run: pip install pipenv
      - run: pipenv install
      # Run the test.
      - run: pipenv run pytest

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v4
      # Set up a python environment using the specified python version.
      - uses: actions/setup-python@v4
        with:
          python-version: 3.10.x

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Build Docker image
        run: |
          docker build -t backend .
      
      - name: Tag Docker Image
        run: |
          docker tag backend:latest ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest
      
      - name: Kubeconfig Login
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ vars.AWS_DEFAULT_REGION }}
          kubectl config current-context
          kubectl get nodes

      - name: Deploy to Kubernetes
        run: cd ./k8s && kustomize edit set image frontend=${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest && kustomize build | kubectl apply -f -

